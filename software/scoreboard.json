[
    {
        "format": "add rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] + x[rs2]"
    },
    {
        "format": "addi rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] + sext(immediate)"
    },
    {
        "format": "addiw rd, rs1, immediate",
        "implementation": "x[rd] ← sext((x[rs1] + sext(immediate))[31:0])"
    },
    {
        "format": "addw rd, rs1, rs2",
        "implementation": "x[rd] ← sext((x[rs1] + x[rs2])[31:0])"
    },
    {
        "format": "amoadd.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] + x[rs2])"
    },
    {
        "format": "amoadd.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] + x[rs2])"
    },
    {
        "format": "amoand.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] and x[rs2])"
    },
    {
        "format": "amoand.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] and x[rs2])"
    },
    {
        "format": "amomax.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] MAX x[rs2])"
    },
    {
        "format": "amomax.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] MAX x[rs2])"
    },
    {
        "format": "amomaxu.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] MAXU x[rs2])"
    },
    {
        "format": "amomaxu.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] MAXU x[rs2])"
    },
    {
        "format": "amomin.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] MIN x[rs2])"
    },
    {
        "format": "amomin.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] MIN x[rs2])"
    },
    {
        "format": "amominu.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] MINU x[rs2])"
    },
    {
        "format": "amominu.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] MINU x[rs2])"
    },
    {
        "format": "amoor.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] or x[rs2])"
    },
    {
        "format": "amoor.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] or x[rs2])"
    },
    {
        "format": "amoswap.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] SWAP x[rs2])"
    },
    {
        "format": "amoswap.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] SWAP x[rs2])"
    },
    {
        "format": "amoxor.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO64(M[x[rs1]] ^ x[rs2])"
    },
    {
        "format": "amoxor.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← AMO32(M[x[rs1]] ^ x[rs2])"
    },
    {
        "format": "and rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] and x[rs2]"
    },
    {
        "format": "andi rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] and sext(immediate)"
    },
    {
        "format": "auipc rd, immediate",
        "implementation": "x[rd] ← pc + sext(immediate[31:12] << 12)"
    },
    {
        "format": "beq rs1, rs2, offset",
        "implementation": "if (rs1 == rs2) pc += sext(offset)"
    },
    {
        "format": "beqz rs1, offset",
        "implementation": "if (rs1 == 0) pc += sext(offset)"
    },
    {
        "format": "bge rs1, rs2, offset",
        "implementation": "if (rs1 >=s rs2) pc += sext(offset)"
    },
    {
        "format": "bgeu rs1, rs2, offset",
        "implementation": "if (rs1 >=u rs2) pc += sext(offset)"
    },
    {
        "format": "bgez rs1, offset",
        "implementation": "if (rs1 >=s 0) pc += sext(offset)"
    },
    {
        "format": "bgt rs1, rs2, offset",
        "implementation": "if (rs1 >s rs2) pc += sext(offset)"
    },
    {
        "format": "bgtu rs1, rs2, offset",
        "implementation": "if (rs1 >u rs2) pc += sext(offset)"
    },
    {
        "format": "bgtz rs2, offset",
        "implementation": "if (rs2 >s 0) pc += sext(offset)"
    },
    {
        "format": "ble rs1, rs2, offset",
        "implementation": "if (rs1 <=s rs2) pc += sext(offset)"
    },
    {
        "format": "bleu rs1, rs2, offset",
        "implementation": "if (rs1 <=u rs2) pc += sext(offset)"
    },
    {
        "format": "blez rs2, offset",
        "implementation": "if (rs2 <=s 0) pc += sext(offset)"
    },
    {
        "format": "blt rs1, rs2, offset",
        "implementation": "if (rs1 <s rs2) pc += sext(offset)"
    },
    {
        "format": "bltz rs1, offset",
        "implementation": "if (rs1 <s 0) pc += sext(offset)"
    },
    {
        "format": "bltu rs1, rs2, offset",
        "implementation": "if (rs1 <u rs2) pc += sext(offset)"
    },
    {
        "format": "bne rs1, rs2, offset",
        "implementation": "if (rs1 == rs2) pc += sext(offset)"
    },
    {
        "format": "bnez rs1, offset",
        "implementation": "if (rs1 != 0) pc += sext(offset)"
    },
    {
        "format": "c.add rd, rs2",
        "implementation": "x[rd] ← x[rd] + x[rs2]"
    },
    {
        "format": "c.addi rd, imm",
        "implementation": "x[rd] ← x[rd] + sext(imm)"
    },
    {
        "format": "c.addi16sp imm",
        "implementation": "x[2] ← x[2] + sext(imm)"
    },
    {
        "format": "c.addi4spn rd', uimm",
        "implementation": "x[8+rd'] ← x[2] + uimm"
    },
    {
        "format": "c.addiw rd, imm",
        "implementation": "x[rd] ← sext((x[rd] + sext(imm))[31:0])"
    },
    {
        "format": "c.and rd', rs2'",
        "implementation": "x[8+rd'] ← x[8+rd'] and x[8+rs2']"
    },
    {
        "format": "c.addw rd', rs2'",
        "implementation": "x[8+rd'] ← sext((x[8+rd'] + x[8+rs2'])[31:0])"
    },
    {
        "format": "c.a ndi rd', imm",
        "implementation": "x[8+rd'] ← x[8+rd'] and sext(imm)"
    },
    {
        "format": "c.b eqz rs1', offset",
        "implementation": "if (x[8+rs1'] == 0) pc += sext(offset)"
    },
    {
        "format": "c.bnez rs1', offset",
        "implementation": "if (x[8+rs1'] != 0) pc += sext(offset)"
    },
    {
        "format": "c.ebreak",
        "implementation": "RaiseException(Breakpoint)"
    },
    {
        "format": "c.fld rd', uimm(rs1')",
        "implementation": "f[8+rd'] ← M[x[8+rs1'] + uimm][63:0]"
    },
    {
        "format": "c.fldsp rd, uimm(x2)",
        "implementation": "f[rd] ← M[x[2] + uimm][63:0]"
    },
    {
        "format": "c.flw rd', uimm(rs1')",
        "implementation": "f[8+rd'] ← M[x[8+rs1'] + uimm][31:0]"
    },
    {
        "format": "c.flwsp rd, uimm(x2)",
        "implementation": "f[rd] ← M[x[2] + uimm][31:0]"
    },
    {
        "format": "c.fsd rs2', uimm(rs1')",
        "implementation": "M[x[8+rs1'] + uimm][63:0] ← f[8+rs2']"
    },
    {
        "format": "c.fsdsp rs2, uimm(x2)",
        "implementation": "M[x[2] + uimm][63:0] ← f[rs2]"
    },
    {
        "format": "c.fsw rs2', uimm(rs1')",
        "implementation": "M[x[8+rs1'] + uimm][31:0] ← f[8+rs2']"
    },
    {
        "format": "c.fswsp rs2, uimm(x2)",
        "implementation": "M[x[2] + uimm][31:0] ← f[rs2]"
    },
    {
        "format": "c.j offset",
        "implementation": "pc += sext(offset)"
    },
    {
        "format": "c.jal offset",
        "implementation": "x[1] ← pc+2; pc += sext(offset)"
    },
    {
        "format": "c.jalr rs1",
        "implementation": "t ← pc+2; pc ← x[rs1]; x[1] ← t"
    },
    {
        "format": "c.jr rs1",
        "implementation": "pc ← x[rs1]"
    },
    {
        "format": "c.ld rd', uimm(rs1')",
        "implementation": "x[8+rd'] ← M[x[8+rs1'] + uimm][63:0]"
    },
    {
        "format": "c.ldsp rd, uimm(x2)",
        "implementation": "x[rd] ← M[x[2] + uimm][63:0]"
    },
    {
        "format": "c.li rd, imm",
        "implementation": "x[rd] ← sext(imm)"
    },
    {
        "format": "c.lui rd, imm",
        "implementation": "x[rd] ← sext(imm[17:12] << 12)"
    },
    {
        "format": "c.lw rd', uimm(rs1')",
        "implementation": "x[8+rd'] ← sext(M[x[8+rs1'] + uimm][31:0])"
    },
    {
        "format": "c.lwsp rd, uimm(x2)",
        "implementation": "x[rd] ← sext(M[x[2] + uimm][31:0])"
    },
    {
        "format": "c.mv rd, rs2",
        "implementation": "x[rd] ← x[rs2]"
    },
    {
        "format": "c.or rd', rs2'",
        "implementation": "x[8+rd'] ← x[8+rd'] or x[8+rs2']"
    },
    {
        "format": "c.sd rs2', uimm(rs1')",
        "implementation": "M[x[8+rs1'] + uimm][63:0] ← x[8+rs2']"
    },
    {
        "format": "c.sdsp rs2, uimm(x2)",
        "implementation": "M[x[2] + uimm][63:0] ← x[rs2]"
    },
    {
        "format": "c.slli rd, uimm",
        "implementation": "x[rd] ← x[rd] << uimm"
    },
    {
        "format": "c.srai rd', uimm",
        "implementation": "x[8+rd'] ← x[8+rd'] >>s uimm"
    },
    {
        "format": "c.srli rd', uimm",
        "implementation": "x[8+rd'] ← x[8+rd'] >>u uimm"
    },
    {
        "format": "c.sub rd', rs2'",
        "implementation": "x[8+rd'] ← x[8+rd'] - x[8+rs2']"
    },
    {
        "format": "c.subw rd', rs2'",
        "implementation": "x[8+rd'] ← sext((x[8+rd'] - x[8+rs2'])[31:0])"
    },
    {
        "format": "c.sw rs2', uimm(rs1')",
        "implementation": "M[x[8+rs1'] + uimm][31:0] ← x[8+rs2']"
    },
    {
        "format": "c.swsp rs2, uimm(x2)",
        "implementation": "M[x[2] + uimm][31:0] ← x[rs2]"
    },
    {
        "format": "c.xor rd', rs2'",
        "implementation": "x[8+rd'] ← x[8+rd'] ^ x[8+rs2']"
    },
    {
        "format": "call rd, symbol",
        "implementation": "x[rd] ← pc+8; pc ← &symbol"
    },
    {
        "format": "csrr rd, csr",
        "implementation": "x[rd] ← CSRs[csr]"
    },
    {
        "format": "csrc csr, rs1",
        "implementation": "CSRs[csr] and= ~x[rs1]"
    },
    {
        "format": "csrci csr, zimm[4:0]",
        "implementation": "CSRs[csr] and= ~zimm"
    },
    {
        "format": "csrrc rd, csr, rs1",
        "implementation": "t ← CSRs[csr]; CSRs[csr] ← t and x[rs1]; x[rd] ← t"
    },
    {
        "format": "csrrci rd, csr, zimm[4:0]",
        "implementation": "t ← CSRs[csr]; CSRs[csr] ← t and ~zimm; x[rd] ← t"
    },
    {
        "format": "csrrs rd, csr, rs1",
        "implementation": "t ← CSRs[csr]; CSRs[csr] ← t or x[rs1]; x[rd] ← t"
    },
    {
        "format": "csrrsi rd, csr, zimm[4:0]",
        "implementation": "t ← CSRs[csr]; CSRs[csr] ← t or zimm; x[rd] ← t"
    },
    {
        "format": "csrrw rd, csr, rs1",
        "implementation": "t ← CSRs[csr]; CSRs[csr] ← x[rs1]; x[rd] ← t"
    },
    {
        "format": "csrrwi rd, csr, zimm[4:0]",
        "implementation": "x[rd] ← CSRs[csr]; CSRs[csr] ← zimm"
    },
    {
        "format": "csrs csr, rs1",
        "implementation": "CSRs[csr] or= x[rs1]"
    },
    {
        "format": "csrsi csr, zimm[4:0]",
        "implementation": "CSRs[csr] or= zimm"
    },
    {
        "format": "csrw csr, rs1",
        "implementation": "CSRs[csr] ← x[rs1]"
    },
    {
        "format": "csrwi csr, zimm[4:0]",
        "implementation": "CSRs[csr] ← zimm"
    },
    {
        "format": "div rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] /s x[rs2]"
    },
    {
        "format": "divu rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] /u x[rs2]"
    },
    {
        "format": "divuw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] /u x[rs2][31:0])"
    },
    {
        "format": "divw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] /s x[rs2][31:0])"
    },
    {
        "format": "ebreak",
        "implementation": "RaiseException(Breakpoint)"
    },
    {
        "format": "ecall",
        "implementation": "RaiseException(EnvironmentCall)"
    },
    {
        "format": "fabs.d rd, rs1",
        "implementation": "f[rd] ← f[rs1]"
    },
    {
        "format": "fabs.s rd, rs1",
        "implementation": "f[rd] ← f[rs1]"
    },
    {
        "format": "fadd.d rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] + f[rs2]"
    },
    {
        "format": "fadd.s rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] + f[rs2]"
    },
    {
        "format": "fclass.d rd, rs1, rs2",
        "implementation": "x[rd] ← classifyd(f[rs1])"
    },
    {
        "format": "fclass.s rd, rs1, rs2",
        "implementation": "x[rd] ← classifys(f[rs1])"
    },
    {
        "format": "fcvt.d.l rd, rs1, rs2",
        "implementation": "f[rd] ← f64s64(x[rs1])"
    },
    {
        "format": "fcvt.d.lu rd, rs1, rs2",
        "implementation": "f[rd] ← f64u64(x[rs1])"
    },
    {
        "format": "fcvt.d.s rd, rs1, rs2",
        "implementation": "f[rd] ← f64f32(f[rs1])"
    },
    {
        "format": "fcvt.d.w rd, rs1, rs2",
        "implementation": "f[rd] ← f64s32(x[rs1])"
    },
    {
        "format": "fcvt.d.wu rd, rs1, rs2",
        "implementation": "f[rd] ← f64u32(x[rs1])"
    },
    {
        "format": "fcvt.l.d rd, rs1, rs2",
        "implementation": "x[rd] ← s64f64(f[rs1])"
    },
    {
        "format": "fcvt.l.s rd, rs1, rs2",
        "implementation": "x[rd] ← s64f32(f[rs1])"
    },
    {
        "format": "fcvt.lu.d rd, rs1, rs2",
        "implementation": "x[rd] ← u64f64(f[rs1])"
    },
    {
        "format": "fcvt.lu.s rd, rs1, rs2",
        "implementation": "x[rd] ← u64f32(f[rs1])"
    },
    {
        "format": "fcvt.s.d rd, rs1, rs2",
        "implementation": "f[rd] ← f32f64(f[rs1])"
    },
    {
        "format": "fcvt.s.l rd, rs1, rs2",
        "implementation": "f[rd] ← f32s64(x[rs1])"
    },
    {
        "format": "fcvt.s.lu rd, rs1, rs2",
        "implementation": "f[rd] ← f32u64(x[rs1])"
    },
    {
        "format": "fcvt.s.w rd, rs1, rs2",
        "implementation": "f[rd] ← f32s32(x[rs1])"
    },
    {
        "format": "fcvt.s.wu rd, rs1, rs2",
        "implementation": "f[rd] ← f32u32(x[rs1])"
    },
    {
        "format": "fcvt.w.d rd, rs1, rs2",
        "implementation": "x[rd] ← sext(s32f64(f[rs1]))"
    },
    {
        "format": "fcvt.wu.d rd, rs1, rs2",
        "implementation": "x[rd] ← sext(u32f64(f[rs1]))"
    },
    {
        "format": "fcvt.w.s rd, rs1, rs2",
        "implementation": "x[rd] ← sext(s32f32(f[rs1]))"
    },
    {
        "format": "fcvt.wu.s rd, rs1, rs2",
        "implementation": "x[rd] ← sext(u32f32(f[rs1]))"
    },
    {
        "format": "fdiv.d rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] / f[rs2]"
    },
    {
        "format": "fdiv.s rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] / f[rs2]"
    },
    {
        "format": "fence pred, succ",
        "implementation": "fence(pred, succ)"
    },
    {
        "format": "fence.i",
        "implementation": "fence(Store, Fetch)"
    },
    {
        "format": "feq.d rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] == f[rs2]"
    },
    {
        "format": "feq.s rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] == f[rs2]"
    },
    {
        "format": "fld rd, offset(rs1)",
        "implementation": "f[rd] ← M[x[rs1] + sext(offset)][63:0]"
    },
    {
        "format": "fle.d rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] or f[rs2]"
    },
    {
        "format": "fle.s rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] or f[rs2]"
    },
    {
        "format": "flt.d rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] < f[rs2]"
    },
    {
        "format": "flt.s rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1] < f[rs2]"
    },
    {
        "format": "flw rd, offset(rs1)",
        "implementation": "f[rd] ← M[x[rs1] + sext(offset)][31:0]"
    },
    {
        "format": "fmadd.d rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← f[rs1] f[rs2]+f[rs3]"
    },
    {
        "format": "fmadd.s rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← f[rs1] f[rs2]+f[rs3]"
    },
    {
        "format": "fmax.d rd, rs1, rs2",
        "implementation": "f[rd] ← max(f[rs1], f[rs2])"
    },
    {
        "format": "fmax.s rd, rs1, rs2",
        "implementation": "f[rd] ← max(f[rs1], f[rs2])"
    },
    {
        "format": "fmin.d rd, rs1, rs2",
        "implementation": "f[rd] ← min(f[rs1], f[rs2])"
    },
    {
        "format": "fmin.s rd, rs1, rs2",
        "implementation": "f[rd] ← min(f[rs1], f[rs2])"
    },
    {
        "format": "fmsub.d rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← f[rs1] * f[rs2] - f[rs3]"
    },
    {
        "format": "fmsub.s rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← f[rs1] * f[rs2] - f[rs3]"
    },
    {
        "format": "fmul.d rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] * f[rs2]"
    },
    {
        "format": "fmul.s rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] * f[rs2]"
    },
    {
        "format": "fmv.d rd, rs1",
        "implementation": "f[rd] ← f[rs1]"
    },
    {
        "format": "fmv.d.x rd, rs1, rs2",
        "implementation": "f[rd] ← x[rs1][63:0]"
    },
    {
        "format": "fmv.s rd, rs1",
        "implementation": "f[rd] ← f[rs1]"
    },
    {
        "format": "fmv.w.x rd, rs1, rs2",
        "implementation": "f[rd] ← x[rs1][31:0]"
    },
    {
        "format": "fmv.x.d rd, rs1, rs2",
        "implementation": "x[rd] ← f[rs1][63:0]"
    },
    {
        "format": "fmv.x.w rd, rs1, rs2",
        "implementation": "x[rd] ← sext(f[rs1][31:0])"
    },
    {
        "format": "fneg.d rd, rs1",
        "implementation": "f[rd] ← -f[rs1]"
    },
    {
        "format": "fneg.s rd, rs1",
        "implementation": "f[rd] ← -f[rs1]"
    },
    {
        "format": "fnmadd.d rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← -f[rs1] * f[rs2] - f[rs3]"
    },
    {
        "format": "fnmadd.s rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← -f[rs1] * f[rs2] - f[rs3]"
    },
    {
        "format": "fnmsub.d rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← -f[rs1] * f[rs2] + f[rs3]"
    },
    {
        "format": "fnmsub.s rd, rs1, rs2, rs3",
        "implementation": "f[rd] ← -f[rs1] * f[rs2] + f[rs3]"
    },
    {
        "format": "frcsr rd",
        "implementation": "x[rd] ← CSRs[fcsr]"
    },
    {
        "format": "frflags rd",
        "implementation": "x[rd] ← CSRs[fflags]"
    },
    {
        "format": "frrm rd",
        "implementation": "x[rd] ← CSRs[frm]"
    },
    {
        "format": "fscsr rd, rs1",
        "implementation": "t ← CSRs[fcsr]; CSRs[fcsr] ← x[rs1]; x[rd] ← t"
    },
    {
        "format": "fsd rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← f[rs2][63:0]"
    },
    {
        "format": "fsflags rd, rs1",
        "implementation": "t ← CSRs[fflags]; CSRs[fflags] ← x[rs1]; x[rd] ← t"
    },
    {
        "format": "fsgnj.d rd, rs1, rs2",
        "implementation": "f[rd] ← {f[rs2][63], f[rs1][62:0]}"
    },
    {
        "format": "fsgnj.s rd, rs1, rs2",
        "implementation": "f[rd] ← {f[rs2][31], f[rs1][30:0]}"
    },
    {
        "format": "fsgnjn.d rd, rs1, rs2",
        "implementation": "f[rd] ← {f[rs2][63], f[rs1][62:0]}"
    },
    {
        "format": "fsgnjn.s rd, rs1, rs2",
        "implementation": "f[rd] ← { f[rs2][31], f[rs1][30:0]}"
    },
    {
        "format": "fsgnjx.d rd, rs1, rs2",
        "implementation": "f[rd] ← {f[rs1][63] ^ f[rs2][63], f[rs1][62:0]}"
    },
    {
        "format": "fsgnjx.s rd, rs1, rs2",
        "implementation": "f[rd] ← {f[rs1][31] ^ f[rs2][31], f[rs1][30:0]}"
    },
    {
        "format": "fsqrt.d rd, rs1, rs2",
        "implementation": "f[rd] ← √f[rs1]"
    },
    {
        "format": "fsqrt.s rd, rs1, rs2",
        "implementation": "f[rd] ← √f[rs1]"
    },
    {
        "format": "fsrm rd, rs1",
        "implementation": "t ← CSRs[frm]; CSRs[frm] ← x[rs1]; x[rd] ← t"
    },
    {
        "format": "fsub.d rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] - f[rs2]"
    },
    {
        "format": "fsub.s rd, rs1, rs2",
        "implementation": "f[rd] ← f[rs1] - f[rs2]"
    },
    {
        "format": "fsw rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← f[rs2][31:0]"
    },
    {
        "format": "j offset",
        "implementation": "pc += sext(offset)"
    },
    {
        "format": "jal rd, offset",
        "implementation": "x[rd] ← pc+4; pc += sext(offset)"
    },
    {
        "format": "jalr rd, offset(rs1)",
        "implementation": "t ← pc+4; pc ← (x[rs1]+sext(offset))& 1; x[rd]=t"
    },
    {
        "format": "jr rs1",
        "implementation": "pc ← x[rs1]"
    },
    {
        "format": "la rd, symbol",
        "implementation": "x[rd] ← &symbol"
    },
    {
        "format": "lb rd, offset(rs1)",
        "implementation": "x[rd] ← sext(M[x[rs1] + sext(offset)][7:0])"
    },
    {
        "format": "lbu rd, offset(rs1)",
        "implementation": "x[rd] ← M[x[rs1] + sext(offset)][7:0]"
    },
    {
        "format": "ld rd, offset(rs1)",
        "implementation": "x[rd] ← M[x[rs1] + sext(offset)][63:0]"
    },
    {
        "format": "lh rd, offset(rs1)",
        "implementation": "x[rd] ← sext(M[x[rs1] + sext(offset)][15:0])"
    },
    {
        "format": "lhu rd, offset(rs1)",
        "implementation": "x[rd] ← M[x[rs1] + sext(offset)][15:0]"
    },
    {
        "format": "li rd, immediate",
        "implementation": "x[rd] ← immediate"
    },
    {
        "format": "lla rd, symbol",
        "implementation": "x[rd] ← &symbol"
    },
    {
        "format": "lr.d rd, (rs1)",
        "implementation": "x[rd] ← LoadReserved64(M[x[rs1]])"
    },
    {
        "format": "lr.w rd, (rs1)",
        "implementation": "x[rd] ← LoadReserved32(M[x[rs1]])"
    },
    {
        "format": "lw rd, offset(rs1)",
        "implementation": "x[rd] ← sext(M[x[rs1] + sext(offset)][31:0])"
    },
    {
        "format": "lwu rd, offset(rs1)",
        "implementation": "x[rd] ← M[x[rs1] + sext(offset)][31:0]"
    },
    {
        "format": "lui rd, immediate",
        "implementation": "x[rd] ← sext(immediate[31:12] << 12)"
    },
    {
        "format": "mret",
        "implementation": "ExceptionReturn(Machine)"
    },
    {
        "format": "mul rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] * x[rs2]"
    },
    {
        "format": "mulh rd, rs1, rs2",
        "implementation": "x[rd] ← (x[rs1] s*s x[rs2]) >>s XLEN"
    },
    {
        "format": "mulhsu rd, rs1, rs2",
        "implementation": "x[rd] ← (x[rs1] s u x[rs2]) >>s XLEN"
    },
    {
        "format": "mulhu rd, rs1, rs2",
        "implementation": "x[rd] ← (x[rs1] u u x[rs2]) >>u XLEN"
    },
    {
        "format": "mulw rd, rs1, rs2",
        "implementation": "x[rd] ← sext((x[rs1] * x[rs2])[31:0])"
    },
    {
        "format": "mv rd, rs1",
        "implementation": "x[rd] ← x[rs1]"
    },
    {
        "format": "neg rd, rs2",
        "implementation": "x[rd] ← -x[rs2]"
    },
    {
        "format": "negw rd, rs2",
        "implementation": "x[rd] ← sext((-x[rs2])[31:0])"
    },
    {
        "format": "nop",
        "implementation": "Nothing"
    },
    {
        "format": "not rd, rs1",
        "implementation": "x[rd] ← ~x[rs1]"
    },
    {
        "format": "or rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] or x[rs2]"
    },
    {
        "format": "ori rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] or sext(immediate)"
    },
    {
        "format": "rdcycle rd",
        "implementation": "x[rd] ← CSRs[cycle]"
    },
    {
        "format": "rdcycleh rd",
        "implementation": "x[rd] ← CSRs[cycleh]"
    },
    {
        "format": "rdinstret rd",
        "implementation": "x[rd] ← CSRs[instret]"
    },
    {
        "format": "rdinstreth rd",
        "implementation": "x[rd] ← CSRs[instreth]"
    },
    {
        "format": "rdtime rd",
        "implementation": "x[rd] ← CSRs[time]"
    },
    {
        "format": "rdtimeh rd",
        "implementation": "x[rd] ← CSRs[timeh]"
    },
    {
        "format": "rem rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] %s x[rs2]"
    },
    {
        "format": "remu rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] %u x[rs2]"
    },
    {
        "format": "remuw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] %u x[rs2][31:0])"
    },
    {
        "format": "remw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] %s x[rs2][31:0])"
    },
    {
        "format": "ret",
        "implementation": "pc ← x[1]"
    },
    {
        "format": "sb rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← x[rs2][7:0]"
    },
    {
        "format": "sc.d rd, rs2, (rs1)",
        "implementation": "x[rd] ← StoreConditional64(M[x[rs1]], x[rs2])"
    },
    {
        "format": "sc.w rd, rs2, (rs1)",
        "implementation": "x[rd] ← StoreConditional32(M[x[rs1]], x[rs2])"
    },
    {
        "format": "sd rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← x[rs2][63:0]"
    },
    {
        "format": "seqz rd, rs1",
        "implementation": "x[rd] ← (x[rs1] == 0)"
    },
    {
        "format": "sext.w rd, rs1",
        "implementation": "x[rd] ← sext(x[rs1][31:0])"
    },
    {
        "format": "sfence.vma rs1, rs2",
        "implementation": "fence(Store, AddressTranslation)"
    },
    {
        "format": "sgtz rd, rs2",
        "implementation": "x[rd] ← (x[rs2] >s 0)"
    },
    {
        "format": "sh rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← x[rs2][15:0]"
    },
    {
        "format": "sw rs2, offset(rs1)",
        "implementation": "M[x[rs1] + sext(offset)] ← x[rs2][31:0]"
    },
    {
        "format": "sll rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] << x[rs2]"
    },
    {
        "format": "slli rd, rs1, shamt",
        "implementation": "x[rd] ← x[rs1] << shamt"
    },
    {
        "format": "slliw rd, rs1, shamt",
        "implementation": "x[rd] ← sext((x[rs1] << shamt)[31:0])"
    },
    {
        "format": "sllw rd, rs1, rs2",
        "implementation": "x[rd] ← sext((x[rs1] << x[rs2][4:0])[31:0])"
    },
    {
        "format": "slt rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] <s x[rs2]"
    },
    {
        "format": "slti rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] <s sext(immediate)"
    },
    {
        "format": "sltiu rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] <u sext(immediate)"
    },
    {
        "format": "sltu rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] <u x[rs2]"
    },
    {
        "format": "sltz rd, rs1",
        "implementation": "x[rd] ← (x[rs1] <s 0)"
    },
    {
        "format": "snez rd, rs2",
        "implementation": "x[rd] ← (x[rs2] ← 0)"
    },
    {
        "format": "sra rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] >>s x[rs2]"
    },
    {
        "format": "srai rd, rs1, shamt",
        "implementation": "x[rd] ← x[rs1] >>s shamt"
    },
    {
        "format": "sraiw rd, rs1, shamt",
        "implementation": "x[rd] ← sext(x[rs1][31:0] >>s shamt)"
    },
    {
        "format": "sraw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] >>s x[rs2][4:0])"
    },
    {
        "format": "sret",
        "implementation": "ExceptionReturn(Supervisor)"
    },
    {
        "format": "srl rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] >>u x[rs2]"
    },
    {
        "format": "srli rd, rs1, shamt",
        "implementation": "x[rd] ← x[rs1] >>u shamt"
    },
    {
        "format": "srliw rd, rs1, shamt",
        "implementation": "x[rd] ← sext(x[rs1][31:0] >>u shamt)"
    },
    {
        "format": "srlw rd, rs1, rs2",
        "implementation": "x[rd] ← sext(x[rs1][31:0] >>u x[rs2][4:0])"
    },
    {
        "format": "sub rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] - x[rs2]"
    },
    {
        "format": "subw rd, rs1, rs2",
        "implementation": "x[rd] ← sext((x[rs1] - x[rs2])[31:0])"
    },
    {
        "format": "tail symbol",
        "implementation": "pc ← &symbol; clobber x[6]"
    },
    {
        "format": "wfi",
        "implementation": "while (noInterruptsPending) idle"
    },
    {
        "format": "xor rd, rs1, rs2",
        "implementation": "x[rd] ← x[rs1] ^ x[rs2]"
    },
    {
        "format": "xori rd, rs1, immediate",
        "implementation": "x[rd] ← x[rs1] ^ sext(immediate)"
    }
]
